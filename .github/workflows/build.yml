name: 🏗️ Build
on:
  push:
    paths-ignore:
      - .github/**
  pull_request:
  workflow_dispatch:
  merge_group:
  create:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions:
  actions: read
  checks: write
  contents: write
  deployments: read
  id-token: write
  issues: read
  discussions: read
  packages: read
  pages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read
run-name: 🏗️ Build ${{ github.ref_name	}}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - ecr: venly-arketype-eu-west-1
            docker_context: "."
    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.VENLY_GITHUB_ACTIONS_TOKEN }}

      - name: 🔍 Get Version
        id: get_version
        uses: ./.github/actions/get_version

      - name: 🐳 Build and Push Docker Image
        id: build-deploy-docker
        uses: ./.github/actions/build_docker
        with:
          aws_role: ${{ secrets.RESOURCES_DEPLOY_ROLE }}
          docker_context: ${{ matrix.docker_context }}
          ecr_repo: ${{ matrix.ecr }}
          sha_tag: ${{ github.sha }}
          version_tag: ${{ steps.get_version.outputs.version }}
          branch_tag: ${{ github.ref_name }}
          push_image: true

  # =====================================================
  # Job: Deploy QA
  # =====================================================
  deploy-qa:
    needs:
      - build
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && github.ref_name == 'develop'
    steps:
      - name: 🔑 Configure AWS credentials
        id: aws_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.RESOURCES_DEPLOY_ROLE }}
          role-session-name: OIDCSession
          mask-aws-account-id: true
          output-credentials: true

      - name: 🚀 Deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws_creds.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws_creds.outputs.aws-secret-access-key }}
          AWS_SESSION_TOKEN: ${{ steps.aws_creds.outputs.aws-session-token }}
          AWS_ACCOUNT_ID: ${{ steps.aws_creds.outputs.aws-account-id }}
          SHA: ${{ github.sha }}
          TAG: ${{ github.ref_name}}
        with:
          host: ${{ secrets.DEMO_ARKETYPE_HOST }}
          username: ${{ secrets.DEMO_ARKETYPE_USER }}
          key: ${{ secrets.ACTIONS_PRIVATE_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
          script: |
            #!/bin/bash
            set -x

            # Parameters (replace these with actual values or script parameters)
            ENVIRONMENT="qa"
            DOCKER_TAG="${{ github.ref_name }}"

            # Docker image URL
            IMAGE_URL="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/venly-arketype-eu-west-1"

            # Define port based on environment
            DOCKER_PORT=4001

            # Create or update the environment file for systemd
            ENV_FILE="/etc/default/venly-arketype-${ENVIRONMENT}"
            {
                echo "DOCKER_IMAGE_URL=${IMAGE_URL}"
                echo "DOCKER_TAG=${DOCKER_TAG}"
                echo "PORT_MAPPING=127.0.0.1:${DOCKER_PORT}:4000"
            } > $ENV_FILE

            echo "sha: ${{ env.SHA }}"
            echo "branch: ${{ github.ref_name }}"

            # AWS credentials and Docker login
            export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}

            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

            # Pull Docker image
            docker pull $IMAGE_URL:$DOCKER_TAG

            # Deployment
            echo "Deploying $DOCKER_TAG"
            SERVICE_NAME="venly-arketype@${ENVIRONMENT}.service"
            sudo systemctl stop $SERVICE_NAME
            sudo systemctl start $SERVICE_NAME

            # Docker logout
            docker logout ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

            echo "Deployment to $ENVIRONMENT completed successfully"
  # =====================================================
  # Job: Deploy Release to Staging
  # =====================================================
  deploy-release-to-staging:
    needs:
      - build
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' && startsWith(github.ref, 'refs/heads/release-')
    steps:
      - name: 🔑 Configure AWS credentials
        id: aws_creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.RESOURCES_DEPLOY_ROLE }}
          role-session-name: OIDCSession
          mask-aws-account-id: true
          output-credentials: true

      - name: 🚀 Deploy
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws_creds.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws_creds.outputs.aws-secret-access-key }}
          AWS_SESSION_TOKEN: ${{ steps.aws_creds.outputs.aws-session-token }}
          AWS_ACCOUNT_ID: ${{ steps.aws_creds.outputs.aws-account-id }}
          SHA: ${{ github.sha }}
          TAG: ${{ github.ref_name}}
        with:
          host: ${{ secrets.DEMO_ARKETYPE_HOST }}
          username: ${{ secrets.DEMO_ARKETYPE_USER }}
          key: ${{ secrets.ACTIONS_PRIVATE_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
          script: |
            #!/bin/bash
            set -x

            # Parameters (replace these with actual values or script parameters)
            ENVIRONMENT="staging"
            DOCKER_TAG="${{ github.ref_name }}"

            # Docker image URL
            IMAGE_URL="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com/venly-arketype-eu-west-1"

            # Define port based on environment
            DOCKER_PORT=4000

            # Create or update the environment file for systemd
            ENV_FILE="/etc/default/venly-arketype-${ENVIRONMENT}"
            {
                echo "DOCKER_IMAGE_URL=${IMAGE_URL}"
                echo "DOCKER_TAG=${DOCKER_TAG}"
                echo "PORT_MAPPING=127.0.0.1:${DOCKER_PORT}:4000"
            } > $ENV_FILE

            echo "sha: ${{ env.SHA }}"
            echo "Following Release will be deployed on staging: ${{ github.ref_name }}"

            # AWS credentials and Docker login
            export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}

            aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

            # Pull Docker image
            docker pull $IMAGE_URL:$DOCKER_TAG

            # Deployment
            echo "Deploying $DOCKER_TAG"
            SERVICE_NAME="venly-arketype@${ENVIRONMENT}.service"
            sudo systemctl stop $SERVICE_NAME
            sudo systemctl start $SERVICE_NAME

            # Docker logout
            docker logout ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-1.amazonaws.com

            echo "Deployment to $ENVIRONMENT completed successfully"
  # =====================================================
  # Job: Merge Back
  # =====================================================
  merge-back:
    if: startsWith(github.ref, 'refs/heads/hotfix-') || startsWith(github.ref, 'refs/heads/release-')
    needs:
      - build
    runs-on: ubuntu-latest
    outputs:
      runner_name: ${{ runner.name }}
    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.VENLY_GITHUB_ACTIONS_TOKEN }}

      - name: 🔄 Merge Back
        if: startsWith(github.ref, 'refs/heads/hotfix-') || startsWith(github.ref, 'refs/heads/release-')
        uses: ./.github/actions/merge_back
        with:
          branch: ${{ github.ref_name }}
          token: ${{ secrets.VENLY_GITHUB_ACTIONS_TOKEN }}
