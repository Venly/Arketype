name: "Deploy ecs Application"
description: "Deploy ecs Application"
inputs:
  aws_region:
    default: eu-west-1
    description: name of the aws region to deploy to
    required: false
  aws_role:
    description: name of the role to use
    required: true
  aws_ecr_role:
    description: name of the role to use
    required: true
  cluster_name:
    description: name of the ecs cluster
    required: true
  ecr_repo:
    description: name of the ecr repository
    required: true
  environment:
    default: qa
    description: The environment to deploy to
    required: true
  service_name:
    description: Name of the service
    required: true
  slack_webhook:
    description: Set Slack webhook for notifications
    required: true
  tag_to_deploy:
    description: name of the tag you want to deploy
    required: true
  token:
    description: The VENLY_GITHUB_ACTIONS_TOKEN
    required: true
runs:
  using: "composite"
  steps:
    - name: 🔑 ConfigureAwsCredentials
      uses: aws-actions/configure-aws-credentials@v4
      id: ecr-credentials
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: ${{ inputs.aws_ecr_role }}
        role-session-name: OIDCSession
        mask-aws-account-id: false

    - name: 🔑 Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: "true"

    - name: 🔖 Get Docker Labels For ${{ inputs.ecr_repo }} - ${{ inputs.tag_to_deploy }}
      continue-on-error: true
      shell: bash
      run: |
        #!/bin/bash
        set -x
        export REPOSITORY_NAME=${{ inputs.ecr_repo }}
        IMAGE_TAG=${{ inputs.tag_to_deploy }}
        # Remove "Build " or "build " from the IMAGE_TAG if present
        IMAGE_TAG=${IMAGE_TAG/Build /}
        IMAGE_TAG=${IMAGE_TAG/build /}
        export IMAGE_TAG

        LABELS=$(aws ecr batch-get-image --repository-name=$REPOSITORY_NAME --image-id imageTag=$IMAGE_TAG --region=eu-west-1 --output json |
          jq -r '.images[].imageManifest' |
          jq '.config.digest' |
          xargs -I{} aws ecr get-download-url-for-layer --repository-name=$REPOSITORY_NAME --layer-digest={} |
          jq '.downloadUrl' |
          xargs curl -s |
          jq '.config.Labels')

        # Extract each label value and write them to GITHUB_ENV
        echo "created=$(echo $LABELS | jq -r '.["org.opencontainers.image.created"]')" >> $GITHUB_ENV
        echo "description=$(echo $LABELS | jq -r '.["org.opencontainers.image.description"]')" >> $GITHUB_ENV
        echo "licenses=$(echo $LABELS | jq -r '.["org.opencontainers.image.licenses"]')" >> $GITHUB_ENV
        echo "revision=$(echo $LABELS | jq -r '.["org.opencontainers.image.revision"]')" >> $GITHUB_ENV
        echo "source=$(echo $LABELS | jq -r '.["org.opencontainers.image.source"]')" >> $GITHUB_ENV
        echo "title=$(echo $LABELS | jq -r '.["org.opencontainers.image.title"]')" >> $GITHUB_ENV
        echo "url=$(echo $LABELS | jq -r '.["org.opencontainers.image.url"]')" >> $GITHUB_ENV
        echo "version=$(echo $LABELS | jq -r '.["org.opencontainers.image.version"]')" >> $GITHUB_ENV

    - name: 🌿 Branch to Deploy
      shell: bash
      run: |
        echo -e "# ====================================================="
        echo -e "🔧 \e[1;33mFollowing Tag will be deployed: \e[1;34m${{ inputs.tag_to_deploy }} \e[0m🔧"
        echo -e "# ====================================================="

    - name: 🐳 Add Environment tag to image if it doesn't exists for ${{ github.sha }} 🐳
      id: cluster-tag
      continue-on-error: true
      shell: bash
      run: |
        #!/bin/bash
        set -x
        repository_name="${{ inputs.ecr_repo }}"
        image_tag="${{ inputs.tag_to_deploy }}"
        environment_tag="${{ inputs.environment }}"

        # Get the image manifest for the image with the SHA tag
        manifest=$(aws ecr batch-get-image --repository-name $repository_name --image-ids imageTag=$image_tag | jq -r '.images[0].imageManifest')

        if [ -z "$manifest" ]; then
          echo "No image found with tag $image_tag. Exiting."
          exit 1
        fi

        # Delete the existing image with the cluster tag if it exists
        aws ecr batch-delete-image --repository-name $repository_name --image-ids imageTag=$environment_tag || true

        # Create a new image tag for the image
        new_tag=$environment_tag

        # Put the image manifest to Amazon ECR with the new tag
        aws ecr put-image --repository-name $repository_name --image-tag $new_tag --image-manifest "$manifest"

    - name: 🔑 ConfigureAwsCredentials
      uses: aws-actions/configure-aws-credentials@v2
      id: credentials
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: ${{ inputs.aws_role }}
        role-session-name: OIDCSession
        mask-aws-account-id: false

    - name: 🔍 Check if task definition file exists
      id: check_task_definition
      shell: bash
      run: |
        #!/bin/bash
        set -x
        microservice=${{ inputs.service_name }}
        if [ -f "task-definition/${{ inputs.environment }}/$microservice.json" ]; then
          echo "Task definition file found."
          echo "self_managed_task=true" >> $GITHUB_ENV
        else
          echo "Task definition file not found."
          echo "If this wasn't indended, please make sure your task-definition file lives under task-definition/${{ inputs.environment }}/$microservice.json"
          echo "self_managed_task=false" >> $GITHUB_ENV
        fi

    - name: 🔧 Adapt task definition
      shell: bash
      run: |
        #!/bin/bash
        set -x
        echo -n "🔧 Adapting Task Definition File"
        microservice=${{ inputs.service_name }}

        if [[ "${{ env.self_managed_task }}" == "true" ]]; then
          echo "Adapting task definition..."
          echo $(cat task-definition/${{ inputs.environment }}/$microservice.json | jq 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition-${{ inputs.service_name }}-${{ inputs.environment }}.json
          task=$(<task-definition-${{ inputs.service_name }}-${{ inputs.environment }}.json)
          echo $task > ${{ inputs.service_name }}-${{ inputs.environment }}.json
        else
          echo "Downloading task definition..."
          # Fetch the task definition ARN from the ECS service
          task_definition_arn=$(aws ecs describe-services --cluster ${{ inputs.cluster_name }} --services ${{ inputs.service_name }} --query 'services[0].taskDefinition' --output text)
          # Describe the task definition using the ARN
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $task_definition_arn)
          # Generate the AWS CLI input format
          echo "$TASK_DEFINITION" | jq '.taskDefinition' > ${{ inputs.service_name }}-${{ inputs.environment }}.json
          if [[ $? -ne 0 ]]; then
            echo "Task definition does not exist"
            exit 1
          fi
          echo $(cat ${{ inputs.service_name }}-${{ inputs.environment }}.json | jq 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy
          )') > task-definition-${{ inputs.service_name }}-${{ inputs.environment }}.json
          task=$(<task-definition-${{ inputs.service_name }}-${{ inputs.environment }}.json)
          echo $task > ${{ inputs.service_name }}-${{ inputs.environment }}.json
          echo "THIS IS THE TASK DEFINITION AFTER ADAPTING TASK DEFINITION"
          cat ${{ inputs.service_name }}-${{ inputs.environment }}.json
          fi

    - name: 🛠 Extract the container name
      shell: bash
      run: |
        #!/bin/bash
        set -x

        # Get the task definition JSON file.
        task_definition_file="${{ inputs.service_name }}-${{ inputs.environment }}.json"
        cat $task_definition_file

        # Check if the containerDefinitions array is empty.
        if [ -z "$(jq -r '.containerDefinitions' $task_definition_file)" ]; then
          echo "No container definitions found."
        else
          # Get the container names not named datadog-agent or log_router.
          container_names=$(jq -r '.containerDefinitions[] | select(.name != "datadog-agent" and .name != "log_router") | .name' $task_definition_file)
          echo $container_names
          # If no container names are found, use the empty string.
          if [ -z "$container_names" ]; then
            container_names=""
          fi

          # Print the container names.
          echo container_name=$container_names >> $GITHUB_ENV
        fi

    - name: 📋 Get service Name from cluster and APM name
      shell: bash
      run: |
        # Fetch the ECS service ARN and name
        ARN=$(aws ecs list-services --cluster ${{ inputs.cluster_name }} --region eu-west-1 | jq -r ".serviceArns[]" | grep -i ${{ inputs.service_name }})
        SERVICE_NAME=$(echo "$ARN" | cut -d '/' -f 3)
        echo "ecs_service_name=$SERVICE_NAME" >> $GITHUB_ENV
        echo "ecs_service_arn=$ARN" >> $GITHUB_ENV

        # Fetch the DD_SERVICE tag to derive the APM name
        TAG_KEY="DD_SERVICE"
        CLUSTER_NAME=${{ inputs.cluster_name }}

        # Get the tags for the ECS service
        SERVICE_TAGS=$(aws ecs list-tags-for-resource --resource-arn $ARN)

        # Extract the DD_SERVICE tag value
        DD_SERVICE=$(echo "$SERVICE_TAGS" | jq -r --arg TAG_KEY "$TAG_KEY" '.tags[]? | select(.key == $TAG_KEY) | .value // empty')

        # Check if DD_SERVICE tag is found
        if [ -z "$DD_SERVICE" ]; then
          echo "DD_SERVICE tag not found."
          echo "No APM Mapping Can be enabled."
        else
          # Set the APM name from the DD_SERVICE tag
          echo "apm_name=$DD_SERVICE" >> $GITHUB_ENV
          echo "The APM name (from DD_SERVICE tag) is $DD_SERVICE"
        fi

    - name: 🐳 Add opencontainer labels to all containers
      id: labels
      shell: bash
      run: |
        #!/bin/bash
        set -x

        echo -n "🐳 Adding Opencontainer labels"
        # Labels
        revision_label="org.opencontainers.image.revision"
        source_label="org.opencontainers.image.source"
        version_label="org.opencontainers.image.version"
        dd_version_label="com.datadoghq.tags.version"
        dd_env_label="com.datadoghq.tags.env"
        dd_service_label="com.datadoghq.tags.service"
        created_label="org.opencontainers.image.created"
        url_label="org.opencontainers.image.url"
        revision_value="${{ env.revision }}"
        source_value="${{ env.source }}"
        version_value="${{ env.version }}"
        created_value="${{ env.created }}"
        url_value="${{ env.url }}"
        dd_version_value="${{ env.version }}"
        dd_env_value="${{ inputs.environment }}"
        dd_service_value="${{ env.apm_name }}"

        # Environment variables
        dd_version_env="DD_VERSION"
        dd_version_value="${{ env.version }}"

        # Read the task definition file.
        task_definition_file="${{ inputs.service_name }}-${{ inputs.environment }}.json"
        task_definition=$(cat "$task_definition_file")

        # Add the labels and environment variables to each container definition in the task definition
        updated_task_definition=$(echo "$task_definition" | jq \
            --arg revision_label "$revision_label" \
            --arg revision_value "$revision_value" \
            --arg dd_version_label "$dd_version_label" \
            --arg dd_version_value "$dd_version_value" \
            --arg dd_env_label "$dd_env_label" \
            --arg dd_env_value "$dd_env_value" \
            --arg dd_service_label "$dd_service_label" \
            --arg dd_service_value "$dd_service_value" \
            --arg revision_value "$revision_value" \
            --arg source_label "$source_label" \
            --arg source_value "$source_value" \
            --arg version_label "$version_label" \
            --arg version_value "$version_value" \
            --arg created_label "$created_label" \
            --arg created_value "$created_value" \
            --arg url_label "$url_label" \
            --arg url_value "$url_value" \
            --arg dd_version_env "$dd_version_env" \
            --arg dd_version_value "$dd_version_value" \
            '.containerDefinitions[] |= (
                .dockerLabels += {
                    ($revision_label): $revision_value,
                    ($source_label): $source_value,
                    ($version_label): $version_value,
                    ($created_label): $created_value,
                    ($url_label): $url_value,
                    ($dd_version_label): $dd_version_value,
                    ($dd_env_label): $dd_env_value,
                    ($dd_service_label): $dd_service_value
                } |
                .environment += [
                    {"name": $dd_version_env, "value": $dd_version_value}
                ]
            )')

        # Save the updated task definition
        echo "$updated_task_definition" > task-definition-${{ inputs.service_name }}-${{ inputs.environment }}.json

    - name: 🎨 Render task definition file
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-${{ inputs.service_name }}-${{ inputs.environment }}.json
        container-name: ${{ env.container_name }}
        image: 289334807197.dkr.ecr.eu-west-1.amazonaws.com/${{ inputs.ecr_repo }}:${{ inputs.tag_to_deploy }}

    - name: 💾 Save rendered task definition
      id: save-task-def
      shell: bash
      run: |
        cat "${{ steps.task-def.outputs.task-definition }}" > ${{ inputs.service_name }}-${{ inputs.environment }}.json
        cat ${{ inputs.service_name }}-${{ inputs.environment }}.json

    - name: 🚀 Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      id: ecs_deployment
      with:
        task-definition: ${{ inputs.service_name }}-${{ inputs.environment }}.json
        service: ${{ env.ecs_service_name }}
        cluster: ${{ inputs.cluster_name }}
        wait-for-service-stability: true
        force-new-deployment: true

    - name: 🔍 Verify Deployment Status
      id: verify_deployment
      shell: bash
      run: |
        # Set variables
        CLUSTER_NAME="${{ inputs.cluster_name }}"
        SERVICE_NAME="${{ env.ecs_service_name }}"
        REGION="eu-west-1"
        MAX_ATTEMPTS=30
        SLEEP_TIME=20

        echo "Starting deployment verification..."

        # Function to check for deployment errors
        check_deployment_errors() {
          local DEPLOYMENT_ID="$1"
          echo "Checking errors for deployment: $DEPLOYMENT_ID"
          
          # Get all tasks for the service
          TASKS=$(aws ecs list-tasks \
            --cluster "$CLUSTER_NAME" \
            --service-name "$SERVICE_NAME" \
            --desired-status STOPPED \
            --region "$REGION" \
            --output json)
          
          if [ -n "$TASKS" ]; then
            TASK_ARNS=$(echo "$TASKS" | jq -r '.taskArns[]')
            if [ -n "$TASK_ARNS" ]; then
              # Describe all tasks at once
              TASKS_INFO=$(aws ecs describe-tasks \
                --cluster "$CLUSTER_NAME" \
                --tasks $TASK_ARNS \
                --region "$REGION" \
                --output json)
              
              # Check each task for errors, but only for the current deployment
              echo "$TASKS_INFO" | jq -c '.tasks[]' | while read -r task; do
                TASK_DEPLOYMENT_ID=$(echo "$task" | jq -r '.startedBy')
                
                # Only check tasks from the current deployment
                if [[ "$TASK_DEPLOYMENT_ID" == *"$DEPLOYMENT_ID"* ]]; then
                  STOPPED_REASON=$(echo "$task" | jq -r '.stoppedReason')
                  LAST_STATUS=$(echo "$task" | jq -r '.lastStatus')
                  TASK_ARN=$(echo "$task" | jq -r '.taskArn')
                  
                  echo "Checking task $TASK_ARN from current deployment"
                  
                  if [ -n "$STOPPED_REASON" ] && [ "$STOPPED_REASON" != "null" ]; then
                    echo "Found stopped task from current deployment with reason: $STOPPED_REASON"
                    
                    # Check container status for detailed errors
                    echo "$task" | jq -c '.containers[]' | while read -r container; do
                      CONTAINER_STATUS=$(echo "$container" | jq -r '.lastStatus')
                      if [ "$CONTAINER_STATUS" = "STOPPED" ]; then
                        EXIT_CODE=$(echo "$container" | jq -r '.exitCode')
                        ERROR_MSG=$(echo "$container" | jq -r '.reason')
                        if [ "$EXIT_CODE" != "0" ] && [ -n "$ERROR_MSG" ] && [ "$ERROR_MSG" != "null" ]; then
                          echo "Container error in current deployment: $ERROR_MSG (Exit code: $EXIT_CODE)"
                          return 1
                        fi
                      fi
                    done
                  fi
                else
                  echo "Skipping task from different deployment: $TASK_DEPLOYMENT_ID"
                fi
              done
            fi
          fi
          return 0
        }

        # Wait and verify deployment
        ATTEMPT=1
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Verification attempt $ATTEMPT of $MAX_ATTEMPTS..."
          
          # Get service status
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --region "$REGION" \
            --output json)
          
          # Get the current deployment ID
          CURRENT_DEPLOYMENT_ID=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .id')
          echo "Current deployment ID: $CURRENT_DEPLOYMENT_ID"
          
          # Check deployment status
          DEPLOYMENT_STATUS=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .status')
          RUNNING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .runningCount')
          DESIRED_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .desiredCount')
          PENDING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .pendingCount')
          FAILED_TASKS=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .failedTasks')
          
          echo -e "\n📊 \033[1;36mDeployment Metrics:\033[0m"
          echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo -e "🔄 \033[1;33mDeployment Status:\033[0m $DEPLOYMENT_STATUS"
          echo -e "👥 \033[1;32mRunning Count:\033[0m   $RUNNING_COUNT / $DESIRED_COUNT"
          echo -e "⏳ \033[1;34mPending Count:\033[0m   $PENDING_COUNT"
          echo -e "❌ \033[1;31mFailed Tasks:\033[0m    $FAILED_TASKS"
          echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
          
          if [ "$DEPLOYMENT_STATUS" = "PRIMARY" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$PENDING_COUNT" -eq "0" ]; then
            # Check for any deployment errors
            if check_deployment_errors "$CURRENT_DEPLOYMENT_ID"; then
              echo "✅ Deployment verified successfully!"
              echo "deployment_success=true" >> $GITHUB_OUTPUT
              echo "deployment_status=SUCCESS" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ Deployment failed due to container errors"
              echo "deployment_success=false" >> $GITHUB_OUTPUT
              echo "deployment_status=FAILED" >> $GITHUB_OUTPUT
              echo "error_message=Container failed to start. Check logs for details." >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          sleep $SLEEP_TIME
        done

        echo "❌ Deployment verification timed out"
        echo "deployment_success=false" >> $GITHUB_OUTPUT
        echo "deployment_status=TIMEOUT" >> $GITHUB_OUTPUT
        echo "error_message=Deployment verification timed out after $MAX_ATTEMPTS attempts" >> $GITHUB_OUTPUT
        exit 1

    - name: ❌ Deployment Failure
      if: steps.verify_deployment.outputs.deployment_success != 'true'
      shell: bash
      run: |
        echo "🚨 Deployment failed! Please check the logs above for detailed error information."
        exit 1

    - name: 🏁 Deploy Finished
      if: steps.verify_deployment.outputs.deployment_success == 'true'
      id: finished
      shell: bash
      run: |
        echo -e "\033[1;32m🏁 Deployment Completed Successfully!🏁\033[0m"
        echo -e "\033[1;34m Starting Uptime Check...\033[0m"

    - name: Set Slack Color and Status Based on Job Status
      if: always()
      shell: bash
      id: set_job_status
      run: |
        echo "JOB_STATUS=unknown" >> $GITHUB_ENV  # Default to unknown status
        if [ "${{ steps.verify_deployment.outputs.deployment_success }}" == "true" ]; then
          echo "SLACK_COLOR=#36a64f" >> $GITHUB_ENV  # Green for success
          echo 'JOB_STATUS=🟢 Success' >> $GITHUB_ENV
        elif [ "${{ steps.verify_deployment.outputs.deployment_success }}" == "false" ]; then
          echo "SLACK_COLOR=#ff0000" >> $GITHUB_ENV  # Red for failure
          echo 'JOB_STATUS=🔴 Failure' >> $GITHUB_ENV
        else
          echo "SLACK_COLOR=#ffc107" >> $GITHUB_ENV  # Yellow for other statuses
          echo 'JOB_STATUS=⏸️ Aborted' >> $GITHUB_ENV
        fi

    - name: Notify Slack
      if: always()
      continue-on-error: true
      shell: bash
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook }}
      run: |
        # Set status details in environment
        if [ "${{ steps.verify_deployment.outputs.deployment_success }}" == "false" ]; then
          echo "STATUS_DETAILS=❌ Failed: ${{ steps.verify_deployment.outputs.error_message || 'Unknown error' }}" >> $GITHUB_ENV
        else
          echo "STATUS_DETAILS=${{ env.JOB_STATUS }}" >> $GITHUB_ENV
        fi

        curl -X POST -H 'Content-type: application/json' --data \
        '{
          "attachments": [
            {
              "color": "${{ env.SLACK_COLOR }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*🚀Deploy Info*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Revision:* ${{ env.revision }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Source:* ${{ env.source }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Image Url:* ${{ env.url }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow Link:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}| ${{ github.run_id }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed Tag:* ${{ inputs.tag_to_deploy }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Status:* ${{ env.STATUS_DETAILS }}"
                    }
                  ]
                }
              ]
            }
          ]
        }' $SLACK_WEBHOOK_URL

    - name: 🔖 Update Tags for Service
      continue-on-error: true
      shell: bash
      run: |
        #!/bin/bash
        set -x
        echo -n "🔖 Updating Tags for Service"
        ACCOUNTID=$(aws sts get-caller-identity --query "Account" --output text)
        project_name=$(echo "${{ github.repository }}" | cut -d'/' -f2)

        declare -A unique_tags

        function add_tag {
            local key=$1
            local value=$2
            unique_tags[$key]=$value
        }

        add_tag "opencontainers_revision" "${{ env.org_opencontainers_image_revision }}"
        add_tag "DD_VERSION" "${{ env.version }}"
        add_tag "opencontainers_version" "${{ env.version }}"
        add_tag "opencontainers_created" "${{ env.created }}"
        add_tag "opencontainers_source" "${{ env.source }}"
        add_tag "opencontainers_image_url" "${{ env.url }}"
        add_tag "opencontainers_revision" "${{ env.revision }}"
        add_tag "git.commit.sha" "${{ env.revision }}"
        add_tag "git.repository_url" "${{ env.source }}"
        add_tag "GITHUB_REPO" "${{ github.repository }}"
        add_tag "DEPLOY_EVENT" "${{ github.event }}"
        add_tag "DEPLOYED_TAG" "${{ inputs.tag_to_deploy }}"
        add_tag "DEPLOY_USER" "${{ github.triggering_actor }}"
        add_tag "ApplicationName" "${{ env.apm_name }}"
        add_tag "ProjectName" "$project_name"

        tags_param=""
        for key in "${!unique_tags[@]}"; do
            tags_param+="key=$key,value=${unique_tags[$key]} "
        done

        aws ecs tag-resource --resource-arn ${{ env.ecs_service_arn }} \
          --tags $tags_param \
          --region ${{ inputs.aws_region }}

    - name: 🔖 Update Tags for Tasks
      continue-on-error: true
      shell: bash
      run: |
        #!/bin/bash
        set -x
        echo -n "🔖 Updating Tags for the Task"
        ACCOUNTID=$(aws sts get-caller-identity --query "Account" --output text)
        project_name=$(echo "${{ github.repository }}" | cut -d'/' -f2)

        declare -A unique_tags

        function add_tag {
            local key=$1
            local value=$2
            unique_tags[$key]=$value
        }

        add_tag "opencontainers_revision" "${{ env.org_opencontainers_image_revision }}"
        add_tag "DD_VERSION" "${{ env.version }}"
        add_tag "opencontainers_version" "${{ env.version }}"
        add_tag "opencontainers_created" "${{ env.created }}"
        add_tag "opencontainers_source" "${{ env.source }}"
        add_tag "opencontainers_image_url" "${{ env.url }}"
        add_tag "opencontainers_revision" "${{ env.revision }}"
        add_tag "git.commit.sha" "${{ env.revision }}"
        add_tag "git.repository_url" "${{ env.source }}"
        add_tag "GITHUB_REPO" "${{ github.repository }}"
        add_tag "DEPLOY_EVENT" "${{ github.event }}"
        add_tag "DEPLOYED_TAG" "${{ inputs.tag_to_deploy }}"
        add_tag "DEPLOY_USER" "${{ github.triggering_actor }}"
        add_tag "ApplicationName" "${{ env.apm_name }}"
        add_tag "ProjectName" "$project_name"

        tags_param=""
        for key in "${!unique_tags[@]}"; do
            tags_param+="key=$key,value=${unique_tags[$key]} "
        done

        for i in $(aws ecs list-tasks --cluster ${{ inputs.cluster_name }} --service-name ${{ env.ecs_service_name }} --query 'taskArns' --output json --region ${{ inputs.aws_region }} | jq -r .[]); do 
          aws ecs tag-resource --resource-arn $i \
            --tags $tags_param \
            --region ${{ inputs.aws_region }}
        done

    - name: 🔖 Update Tags for Cluster
      continue-on-error: true
      shell: bash
      run: |
        #!/bin/bash
        set -x
        project_name=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        echo -n "👷 Updating Tags for the Cluster 👷"
        ACCOUNTID=$(aws sts get-caller-identity --query "Account" --output text)

        declare -A unique_tags

        function add_tag {
            local key=$1
            local value=$2
            unique_tags[$key]=$value
        }

        add_tag "opencontainers_revision" "${{ env.org_opencontainers_image_revision }}"
        add_tag "DD_VERSION" "${{ env.version }}"
        add_tag "opencontainers_version" "${{ env.version }}"
        add_tag "opencontainers_created" "${{ env.created }}"
        add_tag "opencontainers_source" "${{ env.source }}"
        add_tag "opencontainers_image_url" "${{ env.url }}"
        add_tag "opencontainers_revision" "${{ env.revision }}"
        add_tag "git.commit.sha" "${{ env.revision }}"
        add_tag "git.repository_url" "${{ env.source }}"
        add_tag "GITHUB_REPO" "${{ github.repository }}"
        add_tag "DEPLOY_EVENT" "${{ github.event }}"
        add_tag "DEPLOYED_TAG" "${{ inputs.tag_to_deploy }}"
        add_tag "DEPLOY_USER" "${{ github.triggering_actor }}"
        add_tag "ApplicationName" "${{ env.apm_name }}"
        add_tag "ProjectName" "$project_name"

        tags_param=""
        for key in "${!unique_tags[@]}"; do
            tags_param+="key=$key,value=${unique_tags[$key]} "
        done

        aws ecs tag-resource --resource-arn arn:aws:ecs:${{ inputs.aws_region }}:$ACCOUNTID:cluster/${{ inputs.cluster_name }} \
          --tags $tags_param \
          --region ${{ inputs.aws_region }}

    - name: 📊 Final Deployment Status
      if: always()
      shell: bash
      run: |
        # Get final service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster "${{ inputs.cluster_name }}" \
          --services "${{ env.ecs_service_name }}" \
          --region "eu-west-1" \
          --output json)

        # Extract metrics
        DEPLOYMENT_STATUS=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .status')
        RUNNING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .runningCount')
        DESIRED_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .desiredCount')
        PENDING_COUNT=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .pendingCount')
        FAILED_TASKS=$(echo "$SERVICE_STATUS" | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .failedTasks')

        echo -e "\n📊 \033[1;36mFinal Deployment Metrics:\033[0m"
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo -e "🔄 \033[1;33mDeployment Status:\033[0m $DEPLOYMENT_STATUS"
        echo -e "👥 \033[1;32mRunning Count:\033[0m   $RUNNING_COUNT / $DESIRED_COUNT"
        echo -e "⏳ \033[1;34mPending Count:\033[0m   $PENDING_COUNT"
        echo -e "❌ \033[1;31mFailed Tasks:\033[0m    $FAILED_TASKS"
        echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n"
